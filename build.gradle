plugins {
	id 'maven-publish'
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'ploceus' version '1.6-SNAPSHOT'
}

base {
	archivesName = project.archives_base_name
}
version = "${project.version}+mc${project.minecraft_version}"
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings ploceus.featherMappings(project.feather_build)

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//Mojang's modifcations to Netty required for server blacklist to function
	include implementation("com.mojang:netty:1.9")

	//Base Netty
	include implementation("io.netty:netty-buffer:${project.netty_version}")
	include runtimeOnly("io.netty:netty-codec:${project.netty_version}")
	include implementation("io.netty:netty-common:${project.netty_version}")
	include runtimeOnly("io.netty:netty-handler:${project.netty_version}")
	include runtimeOnly("io.netty:netty-resolver:${project.netty_version}")
	include implementation("io.netty:netty-transport-classes-epoll:${project.netty_version}")
	include runtimeOnly("io.netty:netty-transport-native-epoll:${project.netty_version}:linux-aarch_64")
	include runtimeOnly("io.netty:netty-transport-native-epoll:${project.netty_version}:linux-x86_64")
	include runtimeOnly("io.netty:netty-transport-native-unix-common:${project.netty_version}")
	include runtimeOnly("io.netty:netty-transport:${project.netty_version}")

	ploceus.addCommonLibraries()
	ploceus.dependOsl(project.osl_version)
}

processResources {
	inputs.property 'version', version

	filesMatching('fabric.mod.json') {
		expand 'version': version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 8
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
